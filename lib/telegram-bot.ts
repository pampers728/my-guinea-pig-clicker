import { Telegraf } from "telegraf"
import type { Message } from "telegraf/types"

// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ë–î - –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ë–î
interface UserBalance {
  telegramId: number
  username?: string
  stars: number
  carrots: number
  balanceGT: number
}

// In-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ë–î)
const userBalances = new Map<number, UserBalance>()

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN || "")

// –¶–µ–Ω—ã –Ω–∞ –ø–∞–∫–µ—Ç—ã –∑–≤—ë–∑–¥ (–≤ XTR)
const STAR_PACKAGES = [
  { stars: 50, price: 50, label: "50 Stars" },
  { stars: 100, price: 100, label: "100 Stars" },
  { stars: 500, price: 500, label: "500 Stars" },
  { stars: 1000, price: 1000, label: "1000 Stars" },
]

// –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getOrCreateUser(telegramId: number, username?: string): UserBalance {
  if (!userBalances.has(telegramId)) {
    userBalances.set(telegramId, {
      telegramId,
      username,
      stars: 0,
      carrots: 0,
      balanceGT: 0,
    })
  }
  return userBalances.get(telegramId)!
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command("start", (ctx) => {
  const user = getOrCreateUser(ctx.from.id, ctx.from.username)
  ctx.reply(
    `üêπ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Guinea Pig Clicker!\n\n` +
      `üí´ –í–∞—à –±–∞–ª–∞–Ω—Å Stars: ${user.stars}\n` +
      `ü•ï –ú–æ—Ä–∫–æ–≤–∫–∏: ${user.carrots}\n` +
      `ü™ô GT: ${user.balanceGT}\n\n` +
      `–ö–æ–º–∞–Ω–¥—ã:\n` +
      `/buy - –ö—É–ø–∏—Ç—å Stars\n` +
      `/balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n` +
      `/gift @username –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - –ü–æ–¥–∞—Ä–∏—Ç—å Stars\n` +
      `/play - –ò–≥—Ä–∞—Ç—å`,
  )
})

// –ö–æ–º–∞–Ω–¥–∞ /balance
bot.command("balance", (ctx) => {
  const user = getOrCreateUser(ctx.from.id, ctx.from.username)
  ctx.reply(
    `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å:\n` + `üí´ Stars: ${user.stars}\n` + `ü•ï –ú–æ—Ä–∫–æ–≤–∫–∏: ${user.carrots}\n` + `ü™ô GT: ${user.balanceGT}`,
  )
})

// –ö–æ–º–∞–Ω–¥–∞ /buy - –ø–æ–∫–∞–∑–∞—Ç—å –ø–∞–∫–µ—Ç—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏
bot.command("buy", (ctx) => {
  const keyboard = {
    inline_keyboard: STAR_PACKAGES.map((pkg) => [
      {
        text: `${pkg.label} - ${pkg.price} XTR`,
        callback_data: `buy_${pkg.stars}_${pkg.price}`,
      },
    ]),
  }

  ctx.reply("üí´ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç Stars:", { reply_markup: keyboard })
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞
bot.on("callback_query", async (ctx) => {
  const data = ctx.callbackQuery.data

  if (data?.startsWith("buy_")) {
    const [, starsStr, priceStr] = data.split("_")
    const stars = Number.parseInt(starsStr)
    const price = Number.parseInt(priceStr)

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—á—ë—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É
    await ctx.answerCbQuery()
    await ctx.replyWithInvoice({
      title: `${stars} Telegram Stars`,
      description: `–ü–æ–∫—É–ø–∫–∞ ${stars} –∑–≤—ë–∑–¥ –¥–ª—è Guinea Pig Clicker`,
      payload: JSON.stringify({
        telegramId: ctx.from.id,
        stars: stars,
      }),
      provider_token: "", // –î–ª—è XTR –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º
      currency: "XTR",
      prices: [{ label: `${stars} Stars`, amount: price }],
    })
  }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ pre_checkout_query (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!)
bot.on("pre_checkout_query", async (ctx) => {
  try {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    const payload = JSON.parse(ctx.preCheckoutQuery.invoice_payload)
    console.log("[v0] Pre-checkout query:", payload)

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç—ë–∂
    await ctx.answerPreCheckoutQuery(true)
  } catch (error) {
    console.error("[v0] Pre-checkout error:", error)
    await ctx.answerPreCheckoutQuery(false, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞")
  }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ successful_payment
bot.on("message", async (ctx) => {
  const message = ctx.message as Message.SuccessfulPaymentMessage

  if ("successful_payment" in message) {
    const payment = message.successful_payment
    const payload = JSON.parse(payment.invoice_payload)

    console.log("[v0] Successful payment:", {
      telegramId: payload.telegramId,
      stars: payload.stars,
      totalAmount: payment.total_amount,
    })

    // –ó–∞—á–∏—Å–ª—è–µ–º –∑–≤—ë–∑–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const user = getOrCreateUser(payload.telegramId, ctx.from.username)
    user.stars += payload.stars

    await ctx.reply(
      `‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!\n` +
        `üí´ –ó–∞—á–∏—Å–ª–µ–Ω–æ: ${payload.stars} Stars\n` +
        `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${user.stars} Stars\n\n` +
        `–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! üêπ`,
    )

    console.log("[v0] Stars credited:", {
      telegramId: payload.telegramId,
      newBalance: user.stars,
    })
  }
})

// –ö–æ–º–∞–Ω–¥–∞ /gift - –ø–æ–¥–∞—Ä–∏—Ç—å Stars –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É
bot.command("gift", async (ctx) => {
  const args = ctx.message.text.split(" ")

  if (args.length < 3) {
    return ctx.reply(
      "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n" + "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /gift @username –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n" + "–ü—Ä–∏–º–µ—Ä: /gift @friend 100",
    )
  }

  const recipientUsername = args[1].replace("@", "")
  const amount = Number.parseInt(args[2])

  if (isNaN(amount) || amount <= 0) {
    return ctx.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Stars")
  }

  const sender = getOrCreateUser(ctx.from.id, ctx.from.username)

  if (sender.stars < amount) {
    return ctx.reply(
      `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars!\n` + `üí´ –í–∞—à –±–∞–ª–∞–Ω—Å: ${sender.stars} Stars\n` + `üí´ –¢—Ä–µ–±—É–µ—Ç—Å—è: ${amount} Stars`,
    )
  }

  // –ò—â–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–æ username
  let recipient: UserBalance | undefined
  for (const user of userBalances.values()) {
    if (user.username === recipientUsername) {
      recipient = user
      break
    }
  }

  if (!recipient) {
    return ctx.reply(
      `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${recipientUsername} –Ω–µ –Ω–∞–π–¥–µ–Ω!\n` + `–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start`,
    )
  }

  // –ü–µ—Ä–µ–≤–æ–¥–∏–º Stars
  sender.stars -= amount
  recipient.stars += amount

  await ctx.reply(
    `‚úÖ –ü–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n` +
      `üí´ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${amount} Stars\n` +
      `üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: @${recipientUsername}\n` +
      `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${sender.stars} Stars`,
  )

  // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –æ–Ω –≤ —Å–µ—Ç–∏)
  try {
    await bot.telegram.sendMessage(
      recipient.telegramId,
      `üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–¥–∞—Ä–æ–∫!\n` +
        `üí´ ${amount} Stars –æ—Ç @${ctx.from.username}\n` +
        `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${recipient.stars} Stars`,
    )
  } catch (error) {
    console.log("[v0] Could not notify recipient:", error)
  }

  console.log("[v0] Gift sent:", {
    from: ctx.from.id,
    to: recipient.telegramId,
    amount: amount,
  })
})

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ (–¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∏–≥—Ä–æ–π)
export async function getUserBalance(telegramId: number): Promise<UserBalance> {
  return getOrCreateUser(telegramId)
}

// API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ (–¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∏–≥—Ä–æ–π)
export async function updateUserBalance(
  telegramId: number,
  updates: Partial<Omit<UserBalance, "telegramId" | "username">>,
): Promise<UserBalance> {
  const user = getOrCreateUser(telegramId)
  Object.assign(user, updates)
  return user
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
export function startTelegramBot() {
  bot.launch()
  console.log("[v0] Telegram bot started")

  // Graceful stop
  process.once("SIGINT", () => bot.stop("SIGINT"))
  process.once("SIGTERM", () => bot.stop("SIGTERM"))
}

export default bot
